class Codec {
    var short_to_long: [String: String] = [:]
    func encode(_ longUrl: String) -> String {
        var shortenURL = ""
        
        //Collision Handling: What happens if the generatorFunction generates a shortUrl that already exists in the HashMap? You can implement logic to re-generate a new shortUrl until a unique one is found.
        repeat {
            shortenURL = urlShortner(longURL: longUrl)
        } while short_to_long[shortenURL] != nil
        short_to_long[shortenURL] = longUrl
        return shortenURL
    }
    
    func decode(_ shortUrl: String) -> String {
        //Error Handling: non-existent shortUrls in the decode function.
        guard let value = short_to_long[shortUrl] else { return "Not Found"}
        return value
    }
    
    private func urlShortner(longURL: String) -> String {
        let value = String(Int.random(in: 1...100))
        return "tiny" + longURL + value
    }
}
